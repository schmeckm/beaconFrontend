{"version":3,"file":"static/js/1915.49f1489a.chunk.js","mappings":"6SASAA,EAAAA,EAAAA,SAAeC,EAAAA,IA2Gf,UAzGkB,WAChB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,KAAjD,eAAOG,EAAP,KACA,GADA,MACwCH,EAAAA,EAAAA,UAAS,KAAjD,eAAOI,EAAP,KAAqBC,EAArB,KA0BA,OAzBAC,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAIL,GACZ,IAAMM,EAAcC,KAAKC,MACnBC,EAAQ,IAAIF,KAAKD,GACjBI,EAAYD,EAAME,cACpBC,EAAUH,EAAME,cAAcE,MAAM,KACxCD,EAAQ,GAAME,SAASF,EAAQ,IAAM,EACrC,IAAMG,EAAeH,EAAQI,KAAK,KAC5BC,EAAWC,aAAY,WACzBC,IAAAA,KAAW,qDAAsD,CAC/D,UAAaT,EACb,QAAWK,EACX,UAAa,iBACZK,MAAK,SAAAC,GAAM,OAAItB,EAAesB,EAAOC,KAAKA,KAA/B,IACdH,IAAAA,KAAW,qDAAsD,CAC/D,UAAaT,EACb,QAAWK,EACX,UAAa,iBACZK,MAAK,SAAAC,GAAM,OAAInB,EAAgBmB,EAAOC,KAAKA,KAAhC,GACjB,GAAEtB,GACH,OAAO,kBAAMuB,cAAcN,EAApB,CAER,GAAE,CAACjB,IACJI,QAAQC,IAAIJ,GACZG,QAAQC,IAAIP,IAEV,yBAEIA,EAAY0B,OAAS,GACrB,gBAAKC,UAAU,gBAAgBC,IAAKC,EAASC,IAAI,GAAGC,OAAQ,IAAKC,MAAO,OAE1E,gBAAKL,UAAU,aAAf,UACE,SAAC,KAAD,CACEH,KAAM,CACJS,SAAU,CAAC,CACTC,MAAO,2BACPC,gBAAiB,0BACjBC,YAAa,oBACbC,WAAY,CAAC,EAAG,GAChBC,MAAM,EACNd,KAAM,IACL,CACDU,MAAO,2BACPC,gBAAiB,0BACjBC,YAAa,oBACbG,uBAAwB,WACxBD,MAAM,EACNd,KAAM,MAGVgB,QAAS,CACPC,OAAQ,CACNC,EAAG,CACDC,KAAM,WACNC,SAAU,CACRC,SAAU,KACVC,QAAS,IACTC,MAAO,IACPC,UAAW,SAAAC,GACT,IAAMvC,EAAMD,KAAKC,MACjB,GAAIV,EAAa,CAAC,IAAD,YACCA,GADD,IACf,2BAA6B,CAAC,IAAnBkD,EAAkB,QAC3BD,EAAMzB,KAAKS,SAAS,GAAGT,KAAK2B,KAAK,CAC/BT,EAAGhC,EACH0C,EAAEF,EAAEG,MAEP,CANc,+BAOhB,CACD,GAAIlD,EAAc,CAAC,IAAD,YACAA,GADA,IAChB,2BAA8B,CAAC,IAApB+C,EAAmB,QAC5BD,EAAMzB,KAAKS,SAAS,GAAGT,KAAK2B,KAAK,CAC/BT,EAAGhC,EACH0C,EAAGF,EAAEG,MAER,CANe,+BAOjB,CAEDJ,EAAMK,OAAO,QACd,IAGLF,EAAG,CACDG,MAAO,CACLC,SAAS,EACTC,KAAM,UAIZC,YAAa,CACXC,WAAW,SAUxB,C","sources":["views/dashboard/Dashboard.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from 'react'\n\nimport loading from '../../assets/loader.gif';\nimport 'chartjs-adapter-luxon';\nimport Chart from 'chart.js/auto';\nimport { Bar, Chart as ReactChart, Line } from 'react-chartjs-2';\nimport StreamingPlugin from 'chartjs-plugin-streaming';\nimport axios from 'axios';\n// Chart.pluginService.register()\nChart.register(StreamingPlugin);\n\nconst Dashboard = () => {\n  const [firstBeacon, setFirstBeacon] = useState([]);\n  const [timeInterval, setTimeInterval] = useState(20000);\n  const [secondBeacon, setSecondBeacon] = useState([]);\n  useEffect(() => {\n    console.log(timeInterval);\n    const timeElapsed = Date.now();\n    const today = new Date(timeElapsed);\n    const startTime = today.toISOString()\n    let endTime = today.toISOString().split(\":\");\n    endTime[1] = (parseInt(endTime[1]) + 2)\n    const endTimeFinal = endTime.join(\":\")\n    const interval = setInterval(() => {\n        axios.post(\"https://indoor-localization.net/api/beacon/getRSSI\", {\n          \"startTime\": startTime,\n          \"endTime\": endTimeFinal,\n          \"beaconMac\": \"AC233F71C993\"\n        }).then(result => setFirstBeacon(result.data.data));\n        axios.post(\"https://indoor-localization.net/api/beacon/getRSSI\", {\n          \"startTime\": startTime,\n          \"endTime\": endTimeFinal,\n          \"beaconMac\": \"AC233F71C930\"\n        }).then(result => setSecondBeacon(result.data.data));\n    }, timeInterval);\n    return () => clearInterval(interval);\n    \n  }, [timeInterval]);\n  console.log(secondBeacon)\n  console.log(firstBeacon);\n  return (\n    <div>\n      {\n        firstBeacon.length < 1 ?\n        <img className=\"loading-style\" src={loading} alt=\"\" height={100} width={200}/>\n      :\n      <div className=\"rssi-style\">\n        <Line\n          data={{\n            datasets: [{\n              label: 'Beacon Mac: AC233F71C993',\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\n              borderColor: 'rgb(255, 99, 132)',\n              borderDash: [8, 4],\n              fill: false,\n              data: []\n            }, {\n              label: 'Beacon Mac: AC233F71C930',\n              backgroundColor: 'rgba(54, 162, 235, 0.5)',\n              borderColor: 'rgb(54, 162, 235)',\n              cubicInterpolationMode: 'monotone',\n              fill: false,\n              data: []\n            }]\n          }}\n          options={{\n            scales: {\n              x: {\n                type: 'realtime',\n                realtime: {\n                  duration: 15000,\n                  refresh: 2000,\n                  delay: 2000,\n                  onRefresh: chart => {\n                    const now = Date.now();\n                    if (firstBeacon) {\n                      for (const i of firstBeacon) {\n                        chart.data.datasets[0].data.push({\n                          x: now,\n                          y:i.rssi,\n                        });\n                      }\n                    }\n                    if (secondBeacon) {\n                      for (const i of secondBeacon) {\n                        chart.data.datasets[1].data.push({\n                          x: now,\n                          y: i.rssi,\n                        })\n                      }\n                    }\n                    ;\n                    chart.update(\"quiet\")\n                  }\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: 'rssi'\n                }\n              }\n            },\n            interaction: {\n              intersect: false\n            }\n          }\n          }\n\n        />\n      </div>\n}\n    </div>\n  )\n}\n\nexport default Dashboard;\n"],"names":["Chart","StreamingPlugin","useState","firstBeacon","setFirstBeacon","timeInterval","secondBeacon","setSecondBeacon","useEffect","console","log","timeElapsed","Date","now","today","startTime","toISOString","endTime","split","parseInt","endTimeFinal","join","interval","setInterval","axios","then","result","data","clearInterval","length","className","src","loading","alt","height","width","datasets","label","backgroundColor","borderColor","borderDash","fill","cubicInterpolationMode","options","scales","x","type","realtime","duration","refresh","delay","onRefresh","chart","i","push","y","rssi","update","title","display","text","interaction","intersect"],"sourceRoot":""}