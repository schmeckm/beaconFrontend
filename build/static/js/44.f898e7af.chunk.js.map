{"version":3,"sources":["reusable/DocsLink.js","views/notifications/toaster/Toaster.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","Toaster","useState","position","autohide","toasts","setToasts","setPosition","setAutohide","autohideValue","setAutohideValue","closeButton","setCloseButton","fade","setFade","toasters","reduce","toast","push","sm","lg","variant","id","checked","onChange","e","custom","htmlFor","type","value","Number","map","i","color","onClick","Object","keys","toasterKey","key","show"],"mappings":"uRAGMA,EAAW,SAAAC,GACf,IACEC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,KACGC,EAHL,YAIIH,EAJJ,GAMMI,EAAOH,EAAI,kDAA8CA,GAASD,EAAMI,KAE9E,OACE,qBAAKC,UAAU,sBAAf,SACE,cAAC,KAAD,2BACMF,GADN,IAEEC,KAAMA,EACNE,IAAI,sBACJC,OAAO,SACPF,UAAU,qBALZ,SAOE,uBAAOA,UAAU,aAAjB,SAAgCH,GAAQ,aAI/C,EAEcM,MAAMC,KAAKV,E,iGC6JXW,UAnKC,WAEd,IAYA,EAA4BC,mBAAS,CACnC,CAAEC,SAAU,UACZ,CAAEA,SAAU,UACZ,CAAEA,SAAU,YAAaC,SAAU,OAHrC,mBAAOC,EAAP,KAAeC,EAAf,KAMA,EAAgCJ,mBAAS,aAAzC,mBAAOC,EAAP,KAAiBI,EAAjB,KACA,EAAgCL,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBI,EAAjB,KACA,EAA0CN,mBAAS,KAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAwBV,oBAAS,GAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAUMC,EACGV,EAAOW,QAAO,SAACD,EAAUE,GAG9B,OAFAF,EAASE,EAAMd,UAAYY,EAASE,EAAMd,WAAa,GACvDY,EAASE,EAAMd,UAAUe,KAAKD,GACvBF,CACR,GAAE,CAAC,GAIN,OACE,eAAC,IAAD,WACE,eAAC,IAAD,qBAEE,cAAC,IAAD,CAAUvB,KAAK,cAEjB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,KAAD,WACE,cAAC,IAAD,CAAM2B,GAAG,KAAKC,GAAG,IAAjB,SACE,eAAC,IAAD,WACE,iEAEA,eAAC,IAAD,CAAYC,QAAQ,kBAAkBzB,UAAU,YAAhD,UACE,cAAC,IAAD,CACE0B,GAAG,WACHC,QAASnB,EACToB,SAAU,SAAAC,GAAOjB,EAAYiB,EAAE3B,OAAOyB,QAAU,EAChDG,QAAM,IAER,cAAC,KAAD,CAAQL,QAAQ,kBAAkBM,QAAQ,WAA1C,sCAKAvB,GACA,eAAC,IAAD,CAAYR,UAAU,OAAtB,UACE,cAAC,KAAD,CAAQ+B,QAAQ,SAAhB,8BACA,cAAC,IAAD,CACEC,KAAK,SACLC,MAAOpB,EACPe,SAAU,SAAAC,GACRf,EAAiBoB,OAAOL,EAAE3B,OAAO+B,OAClC,OAKP,eAAC,IAAD,CAAYjC,UAAU,OAAtB,UACE,cAAC,KAAD,CAAQ+B,QAAQ,SAAhB,sBACA,wBACE/B,UAAU,eACViC,MAAO1B,EACPqB,SAAU,SAAAC,GAAMlB,EAAYkB,EAAE3B,OAAO+B,MAAO,EAH9C,SAjFE,CAChB,SACA,WACA,aACA,YACA,WACA,cACA,gBACA,eACA,eA8E4BE,KAAI,SAAC5B,EAAU6B,GAAX,OACZ,iCAAiB7B,GAAJ6B,EADD,SAOpB,eAAC,IAAD,CAAYX,QAAQ,kBAAkBzB,UAAU,OAAhD,UACE,cAAC,IAAD,CACE0B,GAAG,OACHC,QAASV,EACTW,SAAU,SAAAC,GAAOX,EAAQW,EAAE3B,OAAOyB,QAAU,EAC5CG,QAAM,IAER,cAAC,KAAD,CAAQL,QAAQ,kBAAkBM,QAAQ,OAA1C,qBAGF,eAAC,IAAD,CAAYN,QAAQ,kBAAkBzB,UAAU,OAAhD,UACE,cAAC,IAAD,CACE0B,GAAG,QACHI,QAAM,EACNH,QAASZ,EACTa,SAAU,SAAAC,GAAMb,EAAea,EAAE3B,OAAOyB,QAAU,IAEpD,cAAC,KAAD,CAAQF,QAAQ,kBAAkBM,QAAQ,QAA1C,4BAKF,cAAC,IAAD,CACE/B,UAAU,YACVqC,MAAM,UACNC,QA/FC,WACf5B,EAAU,GAAD,mBACJD,GADI,CAEP,CAAEF,WAAUC,SAAUA,GAAYK,EAAeE,cAAaE,UAEjE,EAuFa,4BAUJ,cAAC,IAAD,CAAMM,GAAG,KAAKC,GAAG,IAAjB,SACGe,OAAOC,KAAKrB,GAAUgB,KAAI,SAACM,GAAD,OACzB,cAAC,KAAD,CACElC,SAAUkC,EADZ,SAKItB,EAASsB,GAAYN,KAAI,SAACd,EAAOqB,GACjC,OACE,eAAC,KAAD,CAEEC,MAAM,EACNnC,SAAUa,EAAMb,SAChBS,KAAMI,EAAMJ,KAJd,UAME,cAAC,KAAD,CAAcF,YAAaM,EAAMN,YAAjC,yBAGA,cAAC,KAAD,uCACyB0B,EADzB,sCACiEC,EAAM,EADvE,SARK,QAAUA,EAapB,KAnBI,UAAYD,EAHM,eAgCxC,C","file":"static/js/44.f898e7af.chunk.js","sourcesContent":["import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n  CForm,\n  CInput,\n  CInputCheckbox,\n  CButton,\n  CContainer,\n  CRow,\n  CCol,\n  CFormGroup,\n  CLabel\n} from '@coreui/react'\nimport { DocsLink } from 'src/reusable'\n\nconst Toaster = () => {\n\n  const positions = [\n    'static',\n    'top-left',\n    'top-center',\n    'top-right',\n    'top-full',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n    'bottom-full'\n  ]\n\n  const [toasts, setToasts] = useState([\n    { position: 'static'},\n    { position: 'static'},\n    { position: 'top-right', autohide: 3000 }\n  ])\n\n  const [position, setPosition] = useState('top-right')\n  const [autohide, setAutohide] = useState(true)\n  const [autohideValue, setAutohideValue] = useState(5000)\n  const [closeButton, setCloseButton] = useState(true)\n  const [fade, setFade] = useState(true)\n\n  const addToast = () => {\n    setToasts([\n      ...toasts, \n      { position, autohide: autohide && autohideValue, closeButton, fade }\n    ])\n  }\n\n\n  const toasters = (()=>{\n    return toasts.reduce((toasters, toast) => {\n      toasters[toast.position] = toasters[toast.position] || []\n      toasters[toast.position].push(toast)\n      return toasters\n    }, {})\n  })()\n\n\n  return (\n    <CCard>\n      <CCardHeader>\n        Toasts.\n        <DocsLink name=\"-Toast\"/>\n      </CCardHeader>\n      <CCardBody>\n        <CContainer>\n          <CRow>\n            <CCol sm=\"12\" lg=\"6\">\n              <CForm>\n                <h5>Add toast with following props:</h5>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\n                  <CInputCheckbox\n                    id=\"autohide\"\n                    checked={autohide}\n                    onChange={e => { setAutohide(e.target.checked) }}\n                    custom\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\n                    Autohide of the toast\n                  </CLabel>\n                </CFormGroup>\n                {\n                  autohide &&\n                  <CFormGroup className=\"my-2\">\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\n                    <CInput\n                      type=\"number\"\n                      value={autohideValue}\n                      onChange={e => {\n                        setAutohideValue(Number(e.target.value))\n                      }}\n                    />\n                  </CFormGroup>\n                }\n\n                <CFormGroup className=\"my-2\">\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\n                  <select\n                    className=\"form-control\"\n                    value={position}\n                    onChange={e => {setPosition(e.target.value)}}\n                  >\n                    {\n                      positions.map((position, i)=>(\n                        <option key={i}>{position}</option>\n                      ))\n                    }\n                  </select>\n                </CFormGroup>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                  <CInputCheckbox\n                    id=\"fade\"\n                    checked={fade}\n                    onChange={e => { setFade(e.target.checked) }}\n                    custom\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\n                </CFormGroup>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                  <CInputCheckbox\n                    id=\"close\"\n                    custom\n                    checked={closeButton}\n                    onChange={e=> { setCloseButton(e.target.checked) }}\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\n                    closeButton\n                  </CLabel>\n                </CFormGroup>\n\n                <CButton\n                  className=\"mr-1 w-25\"\n                  color=\"success\"\n                  onClick={addToast}\n                >\n                  Add toast\n                </CButton>\n\n              </CForm>\n            </CCol>\n            <CCol sm=\"12\" lg=\"6\">\n              {Object.keys(toasters).map((toasterKey) => (\n                <CToaster\n                  position={toasterKey}\n                  key={'toaster' + toasterKey}\n                >\n                  {\n                    toasters[toasterKey].map((toast, key)=>{\n                    return(\n                      <CToast\n                        key={'toast' + key}\n                        show={true}\n                        autohide={toast.autohide}\n                        fade={toast.fade}\n                      >\n                        <CToastHeader closeButton={toast.closeButton}>\n                          Toast title\n                        </CToastHeader>\n                        <CToastBody>\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\n                        </CToastBody>\n                      </CToast>\n                    )\n                  })\n                  }\n                </CToaster>\n              ))}\n            </CCol>\n          </CRow>\n        </CContainer>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default Toaster\n"],"sourceRoot":""}