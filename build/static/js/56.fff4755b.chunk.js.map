{"version":3,"sources":["screens/Gateway/edit.js"],"names":["Edit","id","useParams","React","useState","gatewayMac","setGatewayMac","description","setDescription","text1","setText1","text2","setText2","useEffect","a","fetch","url","method","response","ok","json","data","success","gateway_detail","alert","fetchData","className","onSubmit","e","headers","body","JSON","stringify","window","location","origin","preventDefault","submitData","handleSubmit","class","for","readOnly","value","type","onChange","target","required","onClick","history","back"],"mappings":"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","file":"static/js/56.fff4755b.chunk.js","sourcesContent":["import React from 'react'\nimport { url } from '../../helpers/helpers';\nimport { useParams } from 'react-router-dom';\n\nexport default function Edit() {\n    const { id } = useParams();\n    const [gatewayMac, setGatewayMac] = React.useState('');\n    const [description, setDescription] = React.useState('');\n    const [text1, setText1] = React.useState('');\n    const [text2, setText2] = React.useState('');\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        async function submitData() {\n            \n            let data = {\n                \"description\":description,\n                \"text1\":text1,\n                \"text2\":text2\n            }\n\n            const response = await fetch(url + 'gateway/updateGateway/' + id, {\n                method: 'PUT',\n                headers : {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            })\n\n            if (response.ok === true) {\n                const data = await response.json();\n                if (data.success == true) {\n                    return window.location = window.location.origin + '/#/gatewayList'\n                } else {\n                    alert(\"Internal Server Error!\");\n                }\n            }\n        }\n        submitData();\n    }\n\n    React.useEffect(() => {\n        async function fetchData() {\n            const response = await fetch(url + 'gateway/getSingleGateway/' + id, {\n                method: 'GET',\n            })\n\n            if (response.ok === true) {\n                const data = await response.json();\n                if (data.success == true) {\n                    const gateway_detail = data.data;\n                    setGatewayMac(gateway_detail.gatewayMac);\n                    setDescription(gateway_detail.description);\n                    setText1(gateway_detail.text1);\n                    setText2(gateway_detail.text2);\n                }else{\n                    alert(\"Oops something went wrong!\")\n                }\n\n            }\n            else alert('Response not fetched properly');\n        }\n        fetchData();\n    }, [id])\n\n    return (\n        <div className=\"container create-page-main-section\">\n            <form onSubmit={e => handleSubmit(e)}>\n                <div className='p-sm-5 create-form-field'>\n                    <div class=\"form-group row\">\n                        <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">GatewayMac:</label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input readOnly value={gatewayMac} type=\"text\" class=\"form-control\" id=\"inputPassword\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Description:<span className='required-label'>*</span></label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input value={description} onChange={e => setDescription(e.target.value)} type=\"text\" class=\"form-control\" id=\"inputPassword\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Text1:<span className='required-label'>*</span></label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input required value={text1} onChange={e => setText1(e.target.value)} type=\"text\" class=\"form-control\" id=\"inputPassword\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Text2:<span className='required-label'>*</span></label>\n                        <div class=\"d-flex align-items-sm-center col-sm-10\">\n                            <input required value={text2} onChange={e => setText2(e.target.value)} type=\"text\" class=\"form-control\" id=\"inputPassword\" />\n                        </div>\n                    </div>\n                </div>\n                <div class=\"d-flex justify-content-center create-catagory-btns\">\n                    <button onClick={() => window.history.back()} type=\"button\" class=\"font-weight-bold m-3 py-2 px-4 btn btn-danger\">Cancel<i\n                        class=\"px-2 fa fa-times\" aria-hidden=\"true\"></i></button>\n                    <button type=\"submit\" class=\"font-weight-bold m-3 py-2 px-4 btn btn-success\">Save<i\n                        class=\"px-2 fa fa-floppy-o\" aria-hidden=\"true\"></i></button>\n                </div>\n            </form>\n        </div>\n    )\n}"],"sourceRoot":""}